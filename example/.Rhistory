if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BEAT")
library(BEAT)
localpath <- system.file('extdata', package = 'BEAT')
positions <- read.csv(file.path(localpath, "sample.positions.csv"))
head(positions)
dim(positions)
apply(positions,2,max)
apply(positions,2,min)
apply(positions[,3:4],2,max)
head(positions)
pplus <- c(0.2, 0.5)
convrates <- 1 - pplus
###################################################
### code chunk number 4: setConfig
###################################################
params <- makeParams(localpath, sampNames, convrates,
is.reference, pminus = 0.2, regionSize = 10000, minCounts = 5)
params
sampNames <- c('reference','sample')
sampNames
is.reference <- c(TRUE, FALSE)
###################################################
### code chunk number 3: setSampleData
###################################################
pplus <- c(0.2, 0.5)
convrates <- 1 - pplus
###################################################
### code chunk number 4: setConfig
###################################################
params <- makeParams(localpath, sampNames, convrates,
is.reference, pminus = 0.2, regionSize = 10000, minCounts = 5)
params
positions_to_regions(params)
params
positions_to_regions
generate_results(params)
head(positions)
library("dplyr")
pos=positions %>% mutate(key=sprintf("%s:%s",chr,pos))
length(pos)
length(pos$key)
length(unique(pos$key))
pos
q()
getwd()
q()
source("load_and_annotate_tree.R")
setwd("~/projects2/mpn_revision/mpn_clonal_evolution_paper/analysis_10sep21/")
source("load_and_annotate_tree.R")
PDD=readRDS("../cache/PDD_all.RDS")
source("validation.R")
zz=get_private_ta_muts(PDD$PD5163)
dim(zz)
head(zz)
zz=zz %>% filter(sample=="PD5163d_lo0006")
zz
write.table(zz,file="rebuttal/tasits.txt",quote=FALSE,sep = "\t",row.names = FALSE,col.names = TRUE)
zz=get_private_ta_muts(PDD$PD5163)
write.table(zz,file="rebuttal/tasits.txt",quote=FALSE,sep = "\t",row.names = FALSE,col.names = TRUE)
excludes=c("PD5163d_lo0022")
zz=zz %>% filter(!(sample %in% excludes) )
write.table(zz,file="~/projects2/tin/tasits.txt",quote=FALSE,sep = "\t",row.names = FALSE,col.names = TRUE)
excludes=c("PD5163d_lo0022","PD5163d_lo0080")
zz=zz %>% filter(!(sample %in% excludes) )
write.table(zz,file="~/projects2/tin/tasits.txt",quote=FALSE,sep = "\t",row.names = FALSE,col.names = TRUE)
excludes=c("PD5163d_lo0022","PD5163d_lo0080","PD5163d_lo0002")
zz=zz %>% filter(!(sample %in% excludes) )
write.table(zz,file="~/projects2/tin/tasits.txt",quote=FALSE,sep = "\t",row.names = FALSE,col.names = TRUE)
unique(zz$sample)
zu=unique(zz$sample)
sapply(zu,function(x) file.exists(sprintf("/Users/nw14/volumes/nw14_network/NFS/cancer_ref01/nst_links/live/2596/PD5163d_lo0006_WGMS/%s_WGMS.bismark_methylation.bam",x)))
sapply(zu,function(x) file.exists(sprintf("/Users/nw14/volumes/nw14_network/NFS/cancer_ref01/nst_links/live/2596/%s_WGMS/%s_WGMS.bismark_methylation.bam",x,x)))
zz=get_private_ta_muts(PDD$PD5163)
zu=unique(zz$sample)
sapply(zu,function(x) file.exists(sprintf("/Users/nw14/volumes/nw14_network/NFS/cancer_ref01/nst_links/live/2596/%s_WGMS/%s_WGMS.bismark_methylation.bam",x,x)))
excludes=c("PD5163d_lo0073")
zz=zz %>% filter(!(sample %in% excludes) )
write.table(zz,file="~/projects2/tin/tasits.txt",quote=FALSE,sep = "\t",row.names = FALSE,col.names = TRUE)
which(!sapply(zu,function(x) file.exists(sprintf("/Users/nw14/volumes/nw14_network/NFS/cancer_ref01/nst_links/live/2596/%s_WGMS/%s_WGMS.bismark_methylation.bam",x,x))))
excludes=c("PD5163d_lo0073","PD5163d_lo0002")
zz=get_private_ta_muts(PDD$PD5163)
zz=zz %>% filter(!(sample %in% excludes) )
write.table(zz,file="~/projects2/tin/tasits.txt",quote=FALSE,sep = "\t",row.names = FALSE,col.names = TRUE)
dbinom(0,8,0.5)
chk=read.table("~/projects2/tin/pd51563lu.txt",head=TRUE,stringsAsFactors = FALSE)
head(chk)
colSums(chk[,6:9])
chk=chk %>% mutate(RefC=ifelse(Ref=="T",nT,nA),AltC=ifelse(Alt="T",nT,nA))
chk=chk %>% mutate(RefC=ifelse(Ref=="T",nT,nA),AltC=ifelse(Alt=="T",nT,nA))
head(chk)
chkf=chk %>% filter(nA+nT>7)
dim(chk)
dim(chkg)
dim(chkf)
chk=chk %>% mutate(N=RefC+AltC)
chkf=chk %>% filter(nA+nT>7)
chkf=chk %>% filter(N>7)
dim(chkf)
chkf %>% filter(Alt==0) %>% dim()
chkf %>% filter(Alt==0) %>% dim()
chkf %>% filter(Alt==0)
chkf %>% filter(AltC==0)
chkf %>% filter(RefC==0)
19/1890
chkf %>% filter(RefC==0) %>% as.data.frame() %>% print(row.names=FALSE)
chkf %>% filter(AltC==0) %>% as.data.frame() %>% print(row.names=FALSE)
hist(chkf$AltC/(chkf$RefC+chkf$AltC))
hist(chkf$AltC/(chkf$RefC+chkf$AltC),breaks=seq(0,1,0.05))
hist(chkf$AltC/(chkf$RefC+chkf$AltC),breaks=seq(0,1,0.05),xlab="VAF",main="VAF of private  T->A variants in PD5163 Methylation Sequencing")
19/1890
rm(PDD)
gc()
pbinom(0,8,prob=0.5)
dbinom(0,8,prob=0.5)
chk$p=pbinom(chk$AltC,size = chk$N)
chk$p=pbinom(chk$AltC,size = chk$N,prob=0.5)
chkf %>% filter(AltC==0) %>% as.data.frame() %>% print(row.names=FALSE)
chkf=chk %>% filter(nA+nT>7)
chkf %>% filter(AltC==0) %>% as.data.frame() %>% print(row.names=FALSE)
chkf$p.adj=p.adjust(chkf$p,method="fdr")
length(which(chkf$p.adj<0.05))
chkf %>% filter(p.adj<0.05)
hist(chk$N)
mean(chk$N)
head(chk)
q()
library("phytools")
source("load_and_annotate_tree.R")
add_node_to_cna
PDD=readRDS("../cache/PDD_all.RDS")
add_node_to_cna
PDD$PD7271$pdx$meta$LOH
PDD$PD5182$pdx$meta$LOH
rm(PDD)
gc()
install.packages("phylolm")
install.packages("phylolm")
PDD=readRDS("../cache/PDD_all.RDS")
rm(PDD)
gc()
get_PDD
get_PD
get_pd
add_agedf
gtc=get_all_sample_metadata()
gtc
head(gtc)
gtc %>% filter(patient=="PD6646")
options(max.print=100000)
gtc %>% filter(patient=="PD6646")
get_all_sample_metadata
get_sample_age_table
gtc=get_all_sample_metadata()
gtc
gtc %>% filter(patient=="PD6646")
PD=get_PD("PD6646")
PD$pdx$agedf
PD$pdx$agedf$age_at_sample_exact
PD=get_PD("PD6646")
source("utils.R")
PD=get_PD("PD6646")
PD$pdx$agedf$age_at_sample_exact
rm(PD)
gc()
PDD=get_PDD()
PDD=lapply(PDD,function(PD){PD$pdx=add_node_to_cna(PD$pdx);PD})
PDD=lapply(PDD,add_adjustment_models)
PDD=lapply(PDD,wraptreefit,niter=20000,b.fit.null = FALSE,method="poisson_tree")
PDD=lapply(PDD,wraptreefit,niter=20000,b.fit.null = FALSE,method="poisson_tree")
saveRDS(PDD,"../cache/PDD_cached.RDS")
PDD$PD7271$fit$poisson_tree$altmodel$ultratree
class(PDD$PD7271$fit$poisson_tree$altmodel$ultratree)
PDD=lapply(PDD,wraptreefit,niter=20000,b.fit.null = TRUE,method="poisson_tree")
saveRDS(PDD,"../cache/PDD_cached.RDS")
installed.packages("MCMCglmm")
install.packages("MCMCglmm")
install.packages("ggrepel")
?plot_grid
library(ggplot2)
?plot_grid
library(gridExtra)
?plot_grid
library(cowplot)
?plot_grid
?ggdraw
?add_sub
library(ggplot2)
theme_set(theme_half_open())
p1 <- ggplot(mtcars, aes(mpg, disp)) + geom_line(colour = "blue") + background_grid(minor='none')
ggdraw(add_sub(p1, "This is an annotation.\nAnnotations can span multiple lines."))
# You can also do this repeatedly.
p2 <- add_sub(p1, "This formula has no relevance here:", y  = 0, vjust = 0)
p3 <- add_sub(p2, expression(paste(a^2+b^2, " = ", c^2)))
ggdraw(p3)
#This code also works with faceted plots:
plot.iris <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() + facet_grid(. ~ Species) + stat_smooth(method = "lm") +
background_grid(major = 'y', minor = "none") + # add thin horizontal lines
panel_border() # and a border around each panel
p2 <- add_sub(plot.iris, "Annotation underneath a faceted plot, left justified.", x = 0, hjust = 0)
ggdraw(p2)
df=do.call("rbind",lapply(PDD,function(PD) PD$pdx$agedf %>% filter(tip.label!="zeros")))
df$pshare=df$smraw
df$logpshare=log(df$pshare)
coldf=get_drivergroup_colors(alpha=1)
cdf=getcolor_df(data.frame(patient=PATIENTS ))
patientColorScale=cdf$col
names(patientColorScale)=factor(cdf$patient,ordered = TRUE)
patientColorScale=scale_color_manual(name="Patient",values=patientColorScale)
#do_telomere_plot=function(PDD,field="telo_mean_length",b.include.all=FALSE){
#  df=do.call("rbind",lapply(PDD,function(PD) PD$pdx$agedf %>% filter(tip.label!="zeros")))
yylab="Mean Telomere Length(bp)"
aggdf=df %>% group_by(patient,age_at_sample_pcy,driver2) %>%
summarise(telo_mean_length=mean(telo_mean_length),n=length(driver2))
plt=ggplot(data=df, aes(x=age_at_sample_pcy, y=telo_mean_length))+
geom_jitter(aes(x=age_at_sample_pcy,y=telo_mean_length,col=driver2),width=0.3,height=0,size=1)+
geom_point(data=aggdf,aes(col=driver2),size=4)+
geom_point(data=aggdf,shape = 1,size = 4,colour="black")+
theme_bw() +
xlab("Age @ Sample")+ylab(yylab)+
xlim(c(0,100))+ylim(c(0,8000))+
ggtitle(sprintf("%s vs Driver Status and Age @ Sample",yylab))+
theme(legend.text = element_text(size=12),legend.position=c(1,1),legend.justification = c(1,1),legend.background=element_rect(linetype = 1, size = 0.5, colour = 1),panel.background = element_rect(linetype = 1, size = 0.5, colour = 1))+
scale_color_manual(name=NULL,breaks=coldf$driver2,labels = coldf$desc, values = coldf$colour)+
guides(colour = guide_legend(override.aes = list(size=2)))
print(dtp$plt)
print(plt)
get_drivergroup_colors
get_drivergroup_colors()
getcolor_df()
getcolor_df
rm(PDD)
gc()
q()
PDD=readRDS("../cache/PDD_cached.RDS")
PDD2=lapply(PDD,function(PD) {list(ultratree=PDD$PD7271$fit$poisson_tree$nullmodel$ultratree,agedf=PD$pdx$agedf)})
saveRDS(PDD2,"../cache/PDD_TELO.RDS")
source("load_and_annotate_tree.R")
get_samples_in_clade
get_all_node_children
PDD=PDD2
df=do.call("rbind",lapply(PDD,function(PD){
tree=drop.tip(PD$tree,"zeros")
pshare=get_smetric(tree)
PD$agedf %>% filter(tip.label!="zeros") %>% left_join(data.frame(tip.label=tree$tip.label,pshare=pshare))
}))
df$logpshare=log(df$pshare)
df=do.call("rbind",lapply(PDD,function(PD){
tree=drop.tip(PD$ultratree,"zeros")
pshare=get_smetric(tree)
PD$agedf %>% filter(tip.label!="zeros") %>% left_join(data.frame(tip.label=tree$tip.label,pshare=pshare))
}))
df$logpshare=log(df$pshare)
head(df$pshare)
plot(df$pshare,df$smraw)
df=do.call("rbind",lapply(PDD,function(PD){
tree=drop.tip(PD$ultratree,"zeros")
pshare=get_smetric(tree)
PD$agedf %>% filter(tip.label!="zeros") %>% left_join(data.frame(tip.label=tree$tip.label,pshare=pshare,stringsAsFactors=FALSE))
}))
df$logpshare=log(df$pshare)
plot(df$pshare,df$smraw)
head(df$smraw)
head(df$pshare)
get_smetric
df=do.call("rbind",lapply(PDD,function(PD){
tree=PD$ultratree
pshare=get_smetric(tree)
PD$agedf %>% filter(tip.label!="zeros") %>% left_join(data.frame(tip.label=tree$tip.label,pshare=pshare,stringsAsFactors=FALSE))
}))
df$logpshare=log(df$pshare)
plot(df$pshare,df$smraw)
while(TRUE){dev.off()}
plot(df$pshare,df$smraw)
ggplot(data=df,aes(x=pshare,y=smraw,label=sample()))+geom_point()+geom_text()
ggplot(data=df,aes(x=pshare,y=smraw,label=sample)+geom_point()+geom_text()
ggplot(data=df,aes(x=pshare,y=smraw,label=sample))+geom_point()+geom_text()
head(df)
ggplot(data=df,aes(x=pshare,y=smraw,label=patient))+geom_point()+geom_text()
ggplot(data=df,aes(x=pshare,y=smraw,label=patient))+geom_point()
ggplot(data=df %>% filter(patient != "PD5147"),aes(x=pshare,y=smraw,label=patient))+geom_point()
ggplot(data=df %>% filter(patient != "PD5147"),aes(x=pshare,y=smraw,label=patient))+geom_point()+geom_text()
ggplot(data=df %>% filter(!(patient %in% c("PD5147","PD7271")),aes(x=pshare,y=smraw,label=patient))+geom_point()
ggplot(data=df %>% filter(!(patient %in% c("PD5147","PD7271"))),aes(x=pshare,y=smraw,label=patient))+geom_point()
df %>% filter(!(patient %in% c("PD5147","PD7271")))
get_smetric(PDD$PD5182$ultratree)
plot(PDD$PD5182$ultratree)
source("load_and_annotate_tree.R")
plot_tree(PDD$PD5182$ultratree)
PDD=readRDS("../cache/PDD_cached.RDS")
plot_tree(PDD$PD5182$pdx$tree_ml)
plot_tree(PDD$PD5182$fit$poisson_tree$nullmodel$ultratree)
plot_tree(PDD2$PD5182$ultratree)
PDD2=lapply(PDD,function(PD) {list(ultratree=PD$fit$poisson_tree$nullmodel$ultratree,agedf=PD$pdx$agedf)})
saveRDS(PDD2,"../cache/PDD_TELO.RDS")
PDDx=PDD
PDD=PDD2
df=do.call("rbind",lapply(PDD,function(PD){
tree=PD$ultratree
pshare=get_smetric(tree)
PD$agedf %>% filter(tip.label!="zeros") %>% left_join(data.frame(tip.label=tree$tip.label,pshare=pshare,stringsAsFactors=FALSE))
}))
df$logpshare=log(df$pshare)
plot(df$pshare,df$smraw)
while(TRUE){dev.off()}
plot(df$pshare,df$smraw)
abline(a=0,b=1)
df=do.call("rbind",lapply(PDD,function(PD){
tree=drop.tip(PD$ultratree,"zeros")\
pshare=get_smetric(tree)
PD$agedf %>% filter(tip.label!="zeros") %>% left_join(data.frame(tip.label=tree$tip.label,pshare=pshare,stringsAsFactors=FALSE))
}))
df$logpshare=log(df$pshare)
df=do.call("rbind",lapply(PDD,function(PD){
tree=drop.tip(PD$ultratree,"zeros")
pshare=get_smetric(tree)
PD$agedf %>% filter(tip.label!="zeros") %>% left_join(data.frame(tip.label=tree$tip.label,pshare=pshare,stringsAsFactors=FALSE))
}))
df$logpshare=log(df$pshare)
plot(df$pshare,df$smraw)
abline(a=0,b=1)
get_treedat=function(PD,drop="Other",b.all=FALSE){
if(b.all){
##Just drop the outgroup (ignores drop param). Not timepoint restriction
phy=drop.tip(PD$ultratree,"zeros")
dat=data.frame(tip.label=phy$tip.label) %>% left_join(PD$agedf,by="tip.label")
return(list(dat=dat,phy=phy))
}
patient=PD$patient
ddf=PD$agedf
if(drop=="Other"){
#Drops non-JAK2 driver clades and restrict to single timepoint
drop.extra=ddf$tip.label[which(ddf$driver2=="Other")]
maxc=PD$agedf %>% filter(driver2=="JAK2") %>% group_by(age_at_sample_pcy) %>% summarise(count=length(tip.label)) %>% filter(count==max(count))
}else if(drop=="Drivers"){
drop.extra=ddf$tip.label[which(ddf$driver2!="WT")]
maxc=PD$agedf %>% filter(driver2=="WT") %>% group_by(age_at_sample_pcy) %>% summarise(count=length(tip.label)) %>% filter(count==max(count))
}else if(drop=="None"){
#Doesn't aim to drop colonies but restricts to timepoint with most colonies.
drop.extra=c()
maxc=PD$agedf %>% group_by(age_at_sample_pcy) %>% summarise(count=length(tip.label)) %>% filter(count==max(count))
}else{
stop("invalid drop param supplied (Other|Drivers|None)")
}
tips=PD$agedf$tip.label[which(PD$agedf$age_at_sample_pcy==maxc$age_at_sample_pcy)]
tree=drop.tip(PD$ultratree,setdiff(PD$ultratree$tip.label,setdiff(tips,drop.extra)))
dat=data.frame(tip.label=tree$tip.label)
dat=dat %>% left_join(ddf,by="tip.label")
rownames(dat)=dat$tip.label
list(dat=dat,phy=tree)
}
get_treedat(PDD$PD5182)
tmp=get_treedat(PDD$PD5182)
tmp$dat$tip.label
tmp$dat$telo_mean_length
tmp$phy
plot_tree(tmp$phy)
zlambda=lapply(PDD,function(PD){
tmp=get_treedat(PD,b.all = TRUE)
phylosig(tmp$phy,tmp$dat$telo_mean_length %>% (function(x){names(x)=tmp$dat$tip.label;x}),test=TRUE,method = "lambda")}
)
zk=lapply(PDD,function(PD){
tmp=get_treedat(PD,b.all = TRUE)
phylosig(tmp$phy,tmp$dat$telo_mean_length %>% (function(x){names(x)=tmp$dat$tip.label;x}),test=TRUE,method = "K")}
)
PDD2=lapply(PDDx,function(PD) {list(patient=PD$patient,ultratree=PD$fit$poisson_tree$nullmodel$ultratree,agedf=PD$pdx$agedf)})
zlambda=lapply(PDD,function(PD){
tmp=get_treedat(PD,b.all = TRUE)
phylosig(tmp$phy,tmp$dat$telo_mean_length %>% (function(x){names(x)=tmp$dat$tip.label;x}),test=TRUE,method = "lambda")}
)
zk=lapply(PDD,function(PD){
tmp=get_treedat(PD,b.all = TRUE)
phylosig(tmp$phy,tmp$dat$telo_mean_length %>% (function(x){names(x)=tmp$dat$tip.label;x}),test=TRUE,method = "K")}
)
PDD=PDD2
zlambda=lapply(PDD,function(PD){
tmp=get_treedat(PD,b.all = TRUE)
phylosig(tmp$phy,tmp$dat$telo_mean_length %>% (function(x){names(x)=tmp$dat$tip.label;x}),test=TRUE,method = "lambda")}
)
zk=lapply(PDD,function(PD){
tmp=get_treedat(PD,b.all = TRUE)
phylosig(tmp$phy,tmp$dat$telo_mean_length %>% (function(x){names(x)=tmp$dat$tip.label;x}),test=TRUE,method = "K")}
)
psigres=data.frame(patient=sapply(PDD,function(PD) PD$patient),
lambda=sapply(zlambda,function(x) x$lambda),
lambda_pval=sapply(zlambda,function(x) x$P),
K=sapply(zk,function(x) x$K),
K_pval=sapply(zk,function(x) x$P))
psigres
saveRDS(PDD2,"../cache/PDD_TELO.RDS")
list.tree(PDD$PD5182)
library("list")
str(PDD$PD5182)
PDD$PD5182$ultratree$agedf
ss=rtree(4)
names(ss)
PDD2=lapply(PDDx,function(PD) {list(patient=PD$patient,ultratree=PD$fit$poisson_tree$nullmodel$ultratree[names(ss)] %>% (function(x) {class(x)="phylo";x}),agedf=PD$pdx$agedf)})
str(PDD2$PD5182)
PDD=PDD2
saveRDS(PDD2,"../cache/PDD_TELO.RDS")
PDD2=lapply(PDDx,function(PD) {
list(patient=PD$patient,
ultratree=PD$fit$poisson_tree$nullmodel$ultratree[names(dummy)] %>%
(function(x) {class(x)="phylo";x}),
agedf=PD$pdx$agedf %>% select(tip.label,age_at_sample_pcy,telo_mean_length,driver2,driver3))
}
)
dummy=rtree(4)
PDD2=lapply(PDDx,function(PD) {
list(patient=PD$patient,
ultratree=PD$fit$poisson_tree$nullmodel$ultratree[names(dummy)] %>%
(function(x) {class(x)="phylo";x}),
agedf=PD$pdx$agedf %>% select(tip.label,age_at_sample_pcy,telo_mean_length,driver2,driver3))
}
)
PDD2=lapply(PDDx,function(PD) {
list(patient=PD$patient,
ultratree=PD$fit$poisson_tree$nullmodel$ultratree[names(dummy)] %>%
(function(x) {class(x)="phylo";x}),
agedf=PD$pdx$agedf %>% dplyr::select(tip.label,age_at_sample_pcy,telo_mean_length,driver2,driver3))
}
)
PDD=PDD2
saveRDS(PDD2,"../cache/PDD_TELO.RDS")
PDD2=lapply(PDDx,function(PD) {
list(patient=PD$patient,
ultratree=PD$fit$poisson_tree$nullmodel$ultratree[names(dummy)] %>%
(function(x) {class(x)="phylo";x}),
agedf=PD$pdx$agedf %>% dplyr::select(patient,tip.label,age_at_sample_pcy,telo_mean_length,driver2,driver3))
}
)
saveRDS(PDD2,"../cache/PDD_TELO.RDS")
PD=readRDS("../example_code/PD6629.RDS")
str(PD)
getwd()
PD=get_PD("PD6629")
str(PD$pdx)
PD$pdx$meta$sample_summary
get_patient_timepoints() %>% filter(patient==PDID) %>% dplyr::select(patient,age_at_sample_pcy,age_at_diagnosis_pcy,N)
PDID="PD6629"
get_patient_timepoints() %>% filter(patient==PDID) %>% dplyr::select(patient,age_at_sample_pcy,age_at_diagnosis_pcy,N)
get_patient_timepoints() %>% filter(patient==PDID) %>% ungroup() %>% dplyr::select(patient,age_at_sample_pcy,age_at_diagnosis_pcy,N)
get_patient_timepoints() %>% filter(patient==PDID) %>% ungroup() %>% dplyr::select(patient,age_at_sample_exact,age_at_diagnosis_pcy,N)
get_patient_timepoints() %>% filter(patient==PDID) %>% ungroup() %>% dplyr::select(patient,age_at_example_exact,age_at_sample_pcy,age_at_diagnosis_pcy,N)
get_patient_timepoints() %>% filter(patient==PDID) %>% ungroup() %>% dplyr::select(patient,age_at_sample_exact,age_at_sample_pcy,age_at_diagnosis_pcy,N)
get_recap_timepoints() %>% filter(patient==PDID)
get_recap_timepoints() %>% filter(patient==PDID) %>% ungroup() %>% dplyr::select(-SAMPLE_DATE)
source("cut_example.R")
PD=readRDS("../example/PD6629.RDS")
str(PD)
source("cut_example.R")
PD=readRDS("../example/PD6629.RDS")
str(PD)
setwd("~/projects2/mpn_revision/mpn_clonal_evolution_paper/example_code/")
q()
source("code.R")
source("cna.R")
library("kableExtra")
PD=readRDS("../example/PD6629.RDS")
MUTCOUNTBIN="./MUTCOUNTBINS.RDS"
bins=readRDS(MUTCOUNTBIN)
CV=c("missense","nonsense","ess_splice","frameshift","inframe","cna","loh","start_lost","nc_ess_splice","stop_lost","complex_sub")
##  Read in list of genes of interest (from other pubs or dnds - here taken from prognostics).
GENES=readLines("GENES.txt")
refcolony=PD$refcolony
tree=plot_basic_tree(PD$pdx,label = PD$patient,style="classic",cv=CV,genes=GENES)
hethomres=get_hethom(PD,refcolony,b_do_plot=TRUE)
source("cna.R")
hethomres=get_hethom(PD,refcolony,b_do_plot=TRUE)
dat
library("majick")
install.packages("magick")
PD$pdx$meta$LOH
ff=e
ff=4
exists(ff)
exists("ff")
exists("fff")
library("rmarkdown")
install.packages("karyoploteR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("karyoploteR")
setwd("~/projects2/mpn_revision/git_repo/mpn_phylogenies_and_evolution/example/")
source("code.R")
source("cna.R")
library("kableExtra")
options(dplyr.summarise.inform = FALSE)
PDID=params$PDID
treemodel=params$TREEMODEL
MUTCOUNTBIN="./MUTCOUNTBINS.RDS"
bins=readRDS(MUTCOUNTBIN)
PD=readRDS("PD6629.RDS")
# Pathogenic substitution types
CV=c("missense","nonsense","ess_splice","frameshift","inframe","cna","loh","start_lost","nc_ess_splice","stop_lost","complex_sub")
##  Read in list of genes of interest (from other pubs or dnds - here taken from prognostics).
GENES=readLines("GENES.txt")
refcolony=PD$refcolony
CENSOR_GERMLINE=TRUE
NITER=2000
##The following populates a list PD$fit$<treemodel>$<altmodel|nullmodel>.  The function wraptreefit wraps a call to the rtreefit package.
PD=wraptreefit(PD,niter=NITER,b.fit.null = FALSE,method=treemodel)
PD=wraptreefit(PD,niter=NITER,b.fit.null = TRUE,method=treemodel)
treemodel="poisson_tree"
NITER=2000
##The following populates a list PD$fit$<treemodel>$<altmodel|nullmodel>.  The function wraptreefit wraps a call to the rtreefit package.
PD=wraptreefit(PD,niter=NITER,b.fit.null = FALSE,method=treemodel)
PD=wraptreefit(PD,niter=NITER,b.fit.null = TRUE,method=treemodel)
hethomres=get_hethom(PD,refcolony,b_do_plot=TRUE)
q()
